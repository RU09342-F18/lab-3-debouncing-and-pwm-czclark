#include <msp430.h> 


/**
 * main.c
 */

// Note: SMCLK is closer to 1047000 Hz

void PWM_Software()
{
  // LED setup /////////////////////////////////////////////////////////////////////////////////

    P1OUT = 0; // Sets P1 output register to 0

    P1SEL &= ~BIT0;
    P1SEL2 &= ~BIT0; // configure P1.0 as GPIO pin

    P1SEL |= BIT4;  // Unimportant  (Testing purposes)
    P1SEL2 &= ~BIT4; // Unimportant      SHOWS SMCLK FREQUENCY
    P1DIR |= BIT4; // Unimportant

    P1DIR |= BIT0; // configure P1.0 as output (LED)

  // Timer A1 setup (LED blink) ////////////////////////////////////////////////////////////////

    TA1CTL = TACLR;

    TA1CCTL0 = CCIE; // Capture Compare - Interrupt Enable for CCR0
    TA1CCTL1 = CCIE; // Capture Compare - Interrupt Enable for CCR1

    TA1CCR0 = 32768; // With SMCLK, creates a 1 kHz timer frequency
                      // CCR0 controls frequency of signal

    TA1CCR1 = 16384; // 1000/2 // Controls Duty Cycle of signal
                   // counts needed = Duty cycle * clock rate (SMCLK) divided by frequency of PWM (1 kHz)

    TA1CTL = TASSEL_1 + MC_1 + ID_0;  // Timer is set in up mode mode (ACLK)
}


void DebounceBt()
{

// Button Setup //////////////////////////////////////////////////////////////////////////////////

       P1SEL &= ~BIT3; // Makes P1.3 a gpio port (button)

       P1DIR &= ~BIT3; // configure P1.3 as input

       P1REN |= BIT3;  // Enable Pullup/down Resistor for SW1
       P1OUT |= BIT3;  // Sets resistor to pull up

       P1IE = 0;
       P1IE |= BIT3;   // Enable interrupt for button (P1.3)
       P1IES |= BIT3;  // P1.3 Hi/Lo edge

       P1IFG &= ~BIT3; // Clears interrupt flag for button press


// Timer A0 (Debounce) setup ///////////////////////////////////////////////////////////////////////

       TA0CTL = TACLR;

       TA0CCR0 = 2; // (1000000*.000002) // SMCLK frequency multiplied by the time it takes for bouncing to stop
                                         // 2us
       TA0CCTL0 = CCIE; // Capture Compare - Interrupt Enable
}

#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void) // If interrupt, button press, occurs ...
    {
        P1IE &= ~BIT3;
        P1IFG &= ~BIT3; // Clear interrupt flag


        TA0CTL = TASSEL_2 + MC_1 + ID_0;
        TA1CTL = TASSEL_2 + MC_0;  // Stall Timer A1
    }


#pragma vector=TIMER0_A0_VECTOR    // Interrupt sequence for CCR0 register (TimerA1)
__interrupt void Timer_A0(void)
{
      TA0CTL = TASSEL_2 + MC_0;
      P1IE |= BIT3;             // Enables button interrupt

      if(TA1CCR1 == TA1CCR0){
          TA1CCR1 = 0;          // Sets duty cycle to 0% after reaching 100%
      }
      else {
          TA1CCR1 += 100;       // Increases duty cycle by 10%
      }
      TA0CTL = TACLR;
      TA1CTL = TASSEL_2 + MC_1 + ID_0; // Restart Timer A1
}


#pragma vector=TIMER1_A0_VECTOR    // Interrupt sequence for CCR0 register (TimerA1)
__interrupt void Timer_A1(void)
{
      P1OUT ^= BIT0; // Toggles LED
}


#pragma vector=TIMER1_A1_VECTOR   // Interrupt sequence for CCR1 register (TimerA1)
__interrupt void Timer_A11(void)
{
      P1OUT ^= BIT0; // Toggles LED
}

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	PWM_Software();
	DebounceBt();

    __bis_SR_register(CPUOFF + GIE);  // MSP goes in LPM0
    while(1){}

	return 0;
}
