#include <msp430.h> 


/**
 * main.c
 */

DebounceBt()
{
       P1OUT = 0; // Sets all output register bits to 0

       P1SEL &= (~BIT0 & ~BIT3);
       P1DIR |= BIT0; // configure P1.0 as output
       P1DIR &= ~BIT3; // configure P1.3 as input

       P1REN |= BIT3;  // Enable Pullup/down Resistor for SW1
       P1OUT |= BIT3;  // Sets resistor to pull up

       P1IE |= BIT3;   // Enable interrupt for button (P1.3)
       P1IES |= BIT3;  // P1.3 Hi/Lo edge

       P1IFG &= ~BIT3; // Clears interrupt flag for button press

       TA0CTL = TACLR;
       TACCR0 = 1000000*.000002; // ACLK frequency times the time it takes for bouncing to stop
                                // 2us
       CCTL0 = CCIE; // Capture Compare - Interrupt Enable

      // BCSCTL3 = LFXT1S_2;

       __bis_SR_register(CPUOFF + GIE);  // MSP goes in LPM0


       while(1) // Do nothing until interrupt occurs
       {}
}

  #pragma vector=PORT1_VECTOR
__interrupt void Port_1(void) // If interrupt, button press, occurs ...
    {
        P1IFG &= ~BIT3; // Clear interrupt flag
        TA0CTL = TASSEL_1 + MC_2 + ID_0;  // Timer is set in up mode mode (ACLK)
    }

#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A0(void)
{
      TA0CTL = TASSEL_0;
      P1OUT ^= BIT0; // Toggles LED

      TA0CTL = TACLR;
}

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
	DebounceBt();

	return 0;
}
