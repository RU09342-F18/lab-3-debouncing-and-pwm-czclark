#include <msp430.h> 

/**
 * main.c
 */


void PWM_Hardware()
{

// LED Setup
    P2OUT = 0; // Sets P2 output register to 0

    P2SEL |= BIT1;
    P2SEL2 &= ~BIT1;
    P2DIR |= BIT1; // Top 3 lines configure PWM signal to P2.1 (LED)

  // Timer A1 setup (LED blink) ////////////////////////////////////////////////////////////////


    TA1CCTL1 = OUTMOD_2; // Toggle / Reset output mode

    TA1CCR0 = 999; // With SMCLK, creates a 1 kHz timer frequency
                      // CCR0 controls frequency of signal

    TA1CCR1 = 500; // 1000/2 // Controls Duty Cycle of signal
                   // counts needed = Duty cycle * clock rate (SMCLK) divided by frequency of PWM (1 kHz)

    TA1CTL = TACLR;
    TA1CTL = TASSEL_2 + MC_1 + ID_0;  // Timer is set in up mode mode (SMCLK)
}


void DebounceBt()
{

// Button Setup //////////////////////////////////////////////////////////////////////////////////

       P1SEL &= ~BIT3; // Makes P1.3 a gpio port (button)
       P1SEL2 &= ~BIT3;

       P1DIR &= ~BIT3; // configure P1.3 as input

       P1REN |= BIT3;  // Enable Pullup/down Resistor for SW1
       P1OUT |= BIT3;  // Sets resistor to pull up

       P1IE |= BIT3;   // Enable interrupt for button (P1.3)
       P1IES |= BIT3;  // P1.3 Hi/Lo edge

       P1IFG &= ~BIT3; // Clears interrupt flag for button press


// Timer A0 (Debounce) setup ///////////////////////////////////////////////////////////////////////

       TA0CTL = TASSEL_2 + MC_0 + ID_0 + TACLR;

       TA0CCR0 = 2;  // (1000000*.000002) // SMCLK frequency multiplied by the time it takes for bouncing to stop
                                         // 2us
       TA0CCTL0 = CCIE; // Capture Compare - Interrupt Enable
}


#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void) // If interrupt, button press, occurs ...
    {
        P1IE &= ~BIT3;  // Disable button interrupt
        P1IFG &= ~BIT3; // Clear button interrupt flag

        TA0CCR0 = 2;  // (1000000*.000002) // SMCLK frequency multiplied by the time it takes for bouncing to stop
                                                 // 2us
        TA0CTL = TASSEL_2 + MC_1 + ID_0;
    }

#pragma vector=TIMER0_A0_VECTOR    // Interrupt sequence for CCR0 register (TimerA1)
__interrupt void Timer_A0(void)
{
      TA0CTL = TASSEL_2 + MC_0 + TACLR;

      P1IE |= BIT3;    // Enables button interrupt

      if(TA1CCR1 > 0){   // Increases duty cycle by 10% after button press
          TA1CCR1 -= 100;
      }
      else {
          TA1CCR1 = 1000;       // Set the duty cycle to 0%
      }

      TA0CCTL0 &= ~CCIFG;       // Remove interrupt flag for debouncing
}


int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	
    PWM_Hardware();
    DebounceBt();
    __bis_SR_register(CPUOFF + GIE);  // MSP goes in LPM0

    while(1){}

	return 0;
}
